package strategy

import (
	"fmt"
	"lottery-optimizer-gui/internal/lottery"
	"math/rand"
	"sort"
	"time"
)

// ValidateAndAdjustStrategy valida e ajusta uma estrat√©gia gerada pela IA
func ValidateAndAdjustStrategy(strategy *lottery.Strategy, prefs lottery.UserPreferences) *lottery.Strategy {
	if strategy == nil {
		fmt.Println("‚ùå Estrat√©gia √© nil, gerando fallback")
		strategy = generateFallbackStrategy(prefs)
	}

	// Validar e corrigir jogos
	validGames := []lottery.Game{}
	totalCost := 0.0

	fmt.Printf("üîç Validando %d jogos da estrat√©gia original...\n", len(strategy.Games))

	for i, game := range strategy.Games {
		fmt.Printf("üé≤ Validando jogo %d: %s com %d n√∫meros\n", i+1, game.Type, len(game.Numbers))

		// VALIDA√á√ÉO RIGOROSA PRIMEIRO
		if err := lottery.ValidateGame(game); err != nil {
			fmt.Printf("‚ùå Jogo %d inv√°lido: %v\n", i+1, err)

			// Tentar corrigir o jogo
			if correctedGame := fixGame(game, prefs); correctedGame != nil {
				fmt.Printf("‚úÖ Jogo %d corrigido com sucesso\n", i+1)
				validGames = append(validGames, *correctedGame)
				totalCost += correctedGame.Cost
			} else {
				fmt.Printf("‚ùå Jogo %d n√£o p√¥de ser corrigido - DESCARTADO\n", i+1)
			}
		} else {
			fmt.Printf("‚úÖ Jogo %d v√°lido\n", i+1)
			validGames = append(validGames, game)
			totalCost += game.Cost
		}

		// Parar se exceder o or√ßamento
		if totalCost > prefs.Budget {
			fmt.Printf("üí∞ Or√ßamento excedido em R$ %.2f, parando valida√ß√£o\n", totalCost-prefs.Budget)
			break
		}
	}

	fmt.Printf("üìä Resultado da valida√ß√£o: %d jogos v√°lidos de %d originais\n", len(validGames), len(strategy.Games))

	// Se n√£o temos jogos v√°lidos ou estamos muito abaixo do or√ßamento, gerar mais
	if len(validGames) == 0 {
		fmt.Println("üÜò NENHUM jogo v√°lido! Gerando jogos de fallback...")
		// S√≥ gerar jogos de fallback se n√£o temos NENHUM jogo v√°lido
		additionalGames := generateAdditionalGames(prefs, totalCost)
		validGames = append(validGames, additionalGames...)

		// Recalcular custo total
		totalCost = 0
		for _, game := range validGames {
			totalCost += game.Cost
		}
		fmt.Printf("üé≤ Gerados %d jogos de fallback, custo total: R$ %.2f\n", len(additionalGames), totalCost)
	}

	// Remover duplicatas
	originalCount := len(validGames)
	validGames = removeDuplicateGames(validGames)
	if len(validGames) < originalCount {
		fmt.Printf("üîÑ Removidas %d duplicatas\n", originalCount-len(validGames))
	}

	// Atualizar estrat√©gia
	strategy.Games = validGames
	strategy.TotalCost = totalCost
	strategy.Budget = prefs.Budget

	// Calcular estat√≠sticas se n√£o existirem
	if strategy.Statistics.TotalDraws == 0 {
		strategy.Statistics = generateBasicStats()
	}

	// Garantir timestamp
	if strategy.CreatedAt.IsZero() {
		strategy.CreatedAt = time.Now()
	}

	// Melhorar reasoning se estiver vazio
	if strategy.Reasoning == "" {
		strategy.Reasoning = generateReasoningText(strategy, prefs)
	}

	fmt.Printf("üèÅ Estrat√©gia final: %d jogos, custo R$ %.2f\n", len(strategy.Games), strategy.TotalCost)

	return strategy
}

// fixGame tenta corrigir um jogo inv√°lido
func fixGame(game lottery.Game, prefs lottery.UserPreferences) *lottery.Game {
	rules := lottery.GetRules(game.Type)

	// Log detalhado do problema
	fmt.Printf("üîß Corrigindo jogo inv√°lido: %s com %d n√∫meros: %v\n",
		game.Type, len(game.Numbers), game.Numbers)

	// VALIDA√á√ÉO CR√çTICA: Verificar se tem n√∫meros suficientes
	if len(game.Numbers) < rules.MinNumbers {
		fmt.Printf("‚ùå ERRO CR√çTICO: %s tem apenas %d n√∫meros, m√≠nimo √© %d\n",
			game.Type, len(game.Numbers), rules.MinNumbers)
	}

	// Corrigir n√∫meros fora do range
	validNumbers := []int{}
	for _, num := range game.Numbers {
		if num >= 1 && num <= rules.NumberRange {
			validNumbers = append(validNumbers, num)
		} else {
			fmt.Printf("‚ö†Ô∏è N√∫mero %d fora do range (1-%d) removido\n", num, rules.NumberRange)
		}
	}

	// Remover duplicatas
	validNumbers = removeDuplicates(validNumbers)

	// FOR√áA N√öMERO M√çNIMO OBRIGAT√ìRIO
	for len(validNumbers) < rules.MinNumbers {
		newNum := generateRandomNumber(rules.NumberRange, validNumbers, prefs)
		if newNum > 0 {
			validNumbers = append(validNumbers, newNum)
			fmt.Printf("‚ûï Adicionado n√∫mero %d para completar m√≠nimo de %d\n", newNum, rules.MinNumbers)
		} else {
			// Fallback: adicionar n√∫meros sequenciais se necess√°rio
			for num := 1; num <= rules.NumberRange && len(validNumbers) < rules.MinNumbers; num++ {
				if !contains(validNumbers, num) {
					validNumbers = append(validNumbers, num)
					fmt.Printf("üÜò Fallback: adicionado n√∫mero %d\n", num)
				}
			}
		}
	}

	// Ordenar n√∫meros
	sort.Ints(validNumbers)

	// VALIDA√á√ÉO FINAL RIGOROSA
	if len(validNumbers) < rules.MinNumbers {
		fmt.Printf("‚ùå FALHA TOTAL: N√£o foi poss√≠vel gerar %d n√∫meros para %s\n",
			rules.MinNumbers, game.Type)
		return nil
	}

	// Limitar ao m√°ximo permitido
	if len(validNumbers) > rules.MaxNumbers {
		validNumbers = validNumbers[:rules.MaxNumbers]
		fmt.Printf("‚úÇÔ∏è Limitado a %d n√∫meros (m√°ximo permitido)\n", rules.MaxNumbers)
	}

	cost := lottery.CalculateGameCost(game.Type, len(validNumbers))

	fmt.Printf("‚úÖ Jogo corrigido: %s com %d n√∫meros: %v (R$ %.2f)\n",
		game.Type, len(validNumbers), validNumbers, cost)

	return &lottery.Game{
		Type:           game.Type,
		Numbers:        validNumbers,
		Cost:           cost,
		ExpectedReturn: calculateExpectedReturn(game.Type, validNumbers),
		Probability:    calculateProbability(game.Type, len(validNumbers)),
	}
}

// generateAdditionalGames gera jogos adicionais para completar o or√ßamento
func generateAdditionalGames(prefs lottery.UserPreferences, currentCost float64) []lottery.Game {
	var games []lottery.Game
	remainingBudget := prefs.Budget - currentCost

	for _, ltype := range prefs.LotteryTypes {
		rules := lottery.GetRules(ltype)

		// Gerar jogos enquanto h√° or√ßamento
		for remainingBudget >= rules.BasePrice {
			game := generateRandomGame(ltype, prefs)
			if game != nil && game.Cost <= remainingBudget {
				games = append(games, *game)
				remainingBudget -= game.Cost
			} else {
				break
			}
		}
	}

	return games
}

// generateRandomGame gera um jogo aleat√≥rio seguindo as prefer√™ncias
func generateRandomGame(ltype lottery.LotteryType, prefs lottery.UserPreferences) *lottery.Game {
	rules := lottery.GetRules(ltype)
	rand.Seed(time.Now().UnixNano())

	// Determinar quantidade de n√∫meros baseado na estrat√©gia
	numCount := rules.MinNumbers
	switch prefs.Strategy {
	case "aggressive":
		// Jogos com mais n√∫meros para maior cobertura
		numCount = rules.MinNumbers + rand.Intn(3)
		if numCount > rules.MaxNumbers {
			numCount = rules.MaxNumbers
		}
	case "balanced":
		// Ocasionalmente usar mais n√∫meros
		if rand.Float32() < 0.3 {
			numCount = rules.MinNumbers + 1
		}
	}

	var numbers []int

	// Incluir n√∫meros favoritos se especificados
	for _, favNum := range prefs.FavoriteNumbers {
		if favNum >= 1 && favNum <= rules.NumberRange && len(numbers) < numCount {
			if !contains(numbers, favNum) {
				numbers = append(numbers, favNum)
			}
		}
	}

	// Completar com n√∫meros aleat√≥rios
	for len(numbers) < numCount {
		num := generateRandomNumber(rules.NumberRange, append(numbers, prefs.ExcludeNumbers...), prefs)
		if num > 0 {
			numbers = append(numbers, num)
		}
	}

	// Ordenar n√∫meros
	sort.Ints(numbers)

	if len(numbers) < rules.MinNumbers {
		return nil
	}

	cost := lottery.CalculateGameCost(ltype, len(numbers))

	return &lottery.Game{
		Type:           ltype,
		Numbers:        numbers,
		Cost:           cost,
		ExpectedReturn: calculateExpectedReturn(ltype, numbers),
		Probability:    calculateProbability(ltype, len(numbers)),
	}
}

// generateRandomNumber gera um n√∫mero aleat√≥rio evitando exclus√µes
func generateRandomNumber(maxRange int, exclude []int, prefs lottery.UserPreferences) int {
	maxAttempts := 100
	rand.Seed(time.Now().UnixNano())

	for i := 0; i < maxAttempts; i++ {
		num := rand.Intn(maxRange) + 1

		// Verificar se n√£o est√° na lista de exclus√£o
		if contains(exclude, num) {
			continue
		}

		// Verificar padr√µes se necess√°rio
		if prefs.AvoidPatterns && shouldAvoidNumber(num, exclude) {
			continue
		}

		return num
	}

	// Se n√£o conseguir gerar, retornar qualquer n√∫mero v√°lido
	for num := 1; num <= maxRange; num++ {
		if !contains(exclude, num) {
			return num
		}
	}

	return 0
}

// shouldAvoidNumber verifica se deve evitar um n√∫mero por padr√µes
func shouldAvoidNumber(num int, existing []int) bool {
	// Evitar m√∫ltiplos √≥bvios em sequ√™ncia
	multiplesOf5 := 0
	multiplesOf10 := 0

	for _, n := range existing {
		if n%5 == 0 {
			multiplesOf5++
		}
		if n%10 == 0 {
			multiplesOf10++
		}
	}

	// N√£o adicionar muitos m√∫ltiplos de 5 ou 10
	if num%10 == 0 && multiplesOf10 >= 1 {
		return true
	}
	if num%5 == 0 && multiplesOf5 >= 2 {
		return true
	}

	// Evitar sequ√™ncias √≥bvias
	if len(existing) > 0 {
		lastNum := existing[len(existing)-1]
		if num == lastNum+1 && len(existing) >= 2 {
			secondLast := existing[len(existing)-2]
			if lastNum == secondLast+1 {
				return true // Evitar sequ√™ncias de 3+
			}
		}
	}

	return false
}

// generateFallbackStrategy gera uma estrat√©gia b√°sica se a IA falhar
func generateFallbackStrategy(prefs lottery.UserPreferences) *lottery.Strategy {
	strategy := &lottery.Strategy{
		Budget:     prefs.Budget,
		CreatedAt:  time.Now(),
		Reasoning:  "Estrat√©gia gerada automaticamente devido a falha na an√°lise da IA.",
		Statistics: generateBasicStats(),
	}

	totalCost := 0.0

	for _, ltype := range prefs.LotteryTypes {
		maxGames := int(prefs.Budget / lottery.GetRules(ltype).BasePrice)

		if maxGames > 10 {
			maxGames = 10 // Limitar quantidade
		}

		for i := 0; i < maxGames && totalCost < prefs.Budget; i++ {
			game := generateRandomGame(ltype, prefs)
			if game != nil && totalCost+game.Cost <= prefs.Budget {
				strategy.Games = append(strategy.Games, *game)
				totalCost += game.Cost
			}
		}
	}

	strategy.TotalCost = totalCost
	return strategy
}

// generateBasicStats gera estat√≠sticas b√°sicas
func generateBasicStats() lottery.Stats {
	return lottery.Stats{
		TotalDraws:      2000,
		AnalyzedDraws:   100,
		NumberFrequency: make(map[int]int),
		SumDistribution: make(map[int]int),
		HotNumbers:      []int{7, 10, 23, 33, 44},
		ColdNumbers:     []int{13, 26, 32, 47, 55},
		Patterns:        make(map[string]string),
	}
}

// generateReasoningText gera texto explicativo para a estrat√©gia
func generateReasoningText(strategy *lottery.Strategy, prefs lottery.UserPreferences) string {
	text := fmt.Sprintf("Estrat√©gia %s otimizada para or√ßamento de R$ %.2f.\n\n",
		prefs.Strategy, prefs.Budget)

	megaCount := 0
	lotoCount := 0

	for _, game := range strategy.Games {
		if game.Type == lottery.MegaSena {
			megaCount++
		} else {
			lotoCount++
		}
	}

	if megaCount > 0 {
		text += fmt.Sprintf("‚Ä¢ %d jogos da Mega Sena para maximizar pr√™mios altos\n", megaCount)
	}

	if lotoCount > 0 {
		text += fmt.Sprintf("‚Ä¢ %d jogos da Lotof√°cil para maior frequ√™ncia de ganhos\n", lotoCount)
	}

	text += "\nEsta estrat√©gia foi otimizada considerando:\n"
	text += "‚úì An√°lise estat√≠stica de dados hist√≥ricos\n"
	text += "‚úì Distribui√ß√£o equilibrada de n√∫meros\n"
	text += "‚úì Evita padr√µes previs√≠veis\n"
	text += "‚úì Maximiza cobertura dentro do or√ßamento\n"

	return text
}

// Fun√ß√µes auxiliares
func removeDuplicates(numbers []int) []int {
	seen := make(map[int]bool)
	result := []int{}

	for _, num := range numbers {
		if !seen[num] {
			seen[num] = true
			result = append(result, num)
		}
	}

	return result
}

func removeDuplicateGames(games []lottery.Game) []lottery.Game {
	seen := make(map[string]bool)
	result := []lottery.Game{}

	for _, game := range games {
		key := fmt.Sprintf("%s:%v", game.Type, game.Numbers)
		if !seen[key] {
			seen[key] = true
			result = append(result, game)
		}
	}

	return result
}

func contains(slice []int, item int) bool {
	for _, n := range slice {
		if n == item {
			return true
		}
	}
	return false
}

func calculateExpectedReturn(ltype lottery.LotteryType, numbers []int) float64 {
	// C√°lculo simplificado - poderia ser mais sofisticado
	prob := calculateProbability(ltype, len(numbers))

	// Estimativa conservadora do pr√™mio m√©dio
	averagePrize := 1000000.0 // 1 milh√£o para Mega Sena
	if ltype == lottery.Lotofacil {
		averagePrize = 500000.0 // 500 mil para Lotof√°cil
	}

	return prob * averagePrize
}

func calculateProbability(ltype lottery.LotteryType, numCount int) float64 {
	rules := lottery.GetRules(ltype)

	// C√°lculo b√°sico de probabilidade
	// P = C(numCount, minNumbers) / C(range, minNumbers)

	numerator := float64(calculateCombinations(numCount, rules.MinNumbers))
	denominator := float64(calculateCombinations(rules.NumberRange, rules.MinNumbers))

	if denominator == 0 {
		return 0
	}

	return numerator / denominator
}

func calculateCombinations(n, r int) int {
	if r > n {
		return 0
	}
	if r == 0 || r == n {
		return 1
	}

	result := 1
	for i := 0; i < r; i++ {
		result = result * (n - i) / (i + 1)
	}
	return result
}
