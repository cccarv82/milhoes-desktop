package updater

import (
	"archive/zip"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/Masterminds/semver/v3"
)

// UpdateInfo informa√ß√µes sobre atualiza√ß√£o dispon√≠vel
type UpdateInfo struct {
	Available    bool   `json:"available"`
	Version      string `json:"version"`
	DownloadURL  string `json:"downloadUrl"`
	ReleaseNotes string `json:"releaseNotes"`
	Size         int64  `json:"size"`
	PublishedAt  string `json:"publishedAt"`
	Message      string `json:"message"`
	ReleaseURL   string `json:"releaseUrl"`
}

// GitHubRelease estrutura da resposta da API do GitHub
type GitHubRelease struct {
	TagName     string `json:"tag_name"`
	Name        string `json:"name"`
	Body        string `json:"body"`
	PublishedAt string `json:"published_at"`
	Prerelease  bool   `json:"prerelease"`
	Assets      []struct {
		Name        string `json:"name"`
		DownloadURL string `json:"browser_download_url"`
		Size        int64  `json:"size"`
	} `json:"assets"`
	HTMLURL string `json:"html_url"`
}

// Updater gerenciador de atualiza√ß√µes
type Updater struct {
	currentVersion string
	githubRepo     string
	client         *http.Client
}

// NewUpdater cria novo updater
func NewUpdater(currentVersion, githubRepo string) *Updater {
	return &Updater{
		currentVersion: currentVersion,
		githubRepo:     githubRepo,
		client: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

// CheckForUpdates verifica se h√° atualiza√ß√µes dispon√≠veis
func (u *Updater) CheckForUpdates(ctx context.Context) (*UpdateInfo, error) {
	log.Printf("üîÑ Iniciando verifica√ß√£o de atualiza√ß√µes...")
	log.Printf("üìÇ Reposit√≥rio: %s", u.githubRepo)
	log.Printf("üì± Vers√£o atual: %s", u.currentVersion)

	url := fmt.Sprintf("https://api.github.com/repos/%s/releases/latest", u.githubRepo)
	log.Printf("üåê URL da API: %s", url)

	// Criar requisi√ß√£o com timeout
	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		log.Printf("‚ùå Erro ao criar requisi√ß√£o: %v", err)
		return nil, fmt.Errorf("erro ao criar requisi√ß√£o: %w", err)
	}

	// Adicionar headers
	req.Header.Set("User-Agent", fmt.Sprintf("Milhoes-Desktop/%s", u.currentVersion))
	req.Header.Set("Accept", "application/vnd.github+json")

	// Fazer requisi√ß√£o
	log.Printf("üì° Enviando requisi√ß√£o para GitHub API...")
	resp, err := u.client.Do(req)
	if err != nil {
		// Verificar se √© erro de timeout
		if ctx.Err() == context.DeadlineExceeded {
			log.Printf("‚è∞ Timeout na requisi√ß√£o")
			return nil, fmt.Errorf("timeout na verifica√ß√£o de atualiza√ß√µes")
		}
		log.Printf("‚ùå Erro na requisi√ß√£o HTTP: %v", err)
		return nil, fmt.Errorf("erro na conex√£o com GitHub: %w", err)
	}
	defer resp.Body.Close()

	log.Printf("üìä Status da resposta: %d", resp.StatusCode)

	// Ler corpo da resposta
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Printf("‚ùå Erro ao ler resposta: %v", err)
		return nil, fmt.Errorf("erro ao ler resposta: %w", err)
	}

	// Tratar diferentes c√≥digos de status
	switch resp.StatusCode {
	case 200:
		log.Printf("‚úÖ Resposta recebida com sucesso")
		// Continuar com processamento normal
	case 404:
		log.Printf("üîç Reposit√≥rio retornou 404")
		// Verificar se √© reposit√≥rio sem releases ou reposit√≥rio privado
		if strings.Contains(u.githubRepo, "milhoes-releases") {
			log.Printf("üì¶ Reposit√≥rio de releases ainda n√£o possui releases publicadas")
			return &UpdateInfo{
				Available: false,
				Message:   "Reposit√≥rio de releases configurado, mas ainda n√£o possui releases. A verifica√ß√£o funcionar√° ap√≥s a primeira release ser publicada.",
			}, nil
		} else {
			log.Printf("üîí Reposit√≥rio privado ou n√£o encontrado")
			return &UpdateInfo{
				Available: false,
				Message:   "Auto-updates n√£o dispon√≠vel para reposit√≥rios privados. Verifique manualmente em: https://github.com/" + u.githubRepo + "/releases",
			}, nil
		}
	case 403:
		log.Printf("üö´ Rate limit do GitHub (403)")
		return nil, fmt.Errorf("rate limit do GitHub atingido. Tente novamente em alguns minutos")
	default:
		log.Printf("‚ùå Status inesperado: %d", resp.StatusCode)
		log.Printf("üìÑ Corpo da resposta: %s", string(body))
		return nil, fmt.Errorf("GitHub API retornou status %d", resp.StatusCode)
	}

	// Parse da resposta JSON
	var release GitHubRelease
	if err := json.Unmarshal(body, &release); err != nil {
		log.Printf("‚ùå Erro ao fazer parse do JSON: %v", err)
		log.Printf("üìÑ JSON recebido: %s", string(body))
		return nil, fmt.Errorf("erro ao processar resposta do GitHub: %w", err)
	}

	log.Printf("üè∑Ô∏è  √öltima vers√£o dispon√≠vel: %s", release.TagName)
	log.Printf("üìÖ Data de publica√ß√£o: %s", release.PublishedAt)

	// Comparar vers√µes
	currentVer := strings.TrimPrefix(u.currentVersion, "v")
	latestVer := strings.TrimPrefix(release.TagName, "v")

	log.Printf("üîÑ Comparando vers√µes:")
	log.Printf("   üì± Vers√£o atual original: '%s'", u.currentVersion)
	log.Printf("   üè∑Ô∏è Tag do GitHub original: '%s'", release.TagName)
	log.Printf("   üì± Vers√£o atual limpa: '%s'", currentVer)
	log.Printf("   üè∑Ô∏è Vers√£o GitHub limpa: '%s'", latestVer)

	// Verificar se h√° atualiza√ß√£o dispon√≠vel
	isNewer, err := u.isVersionNewer(currentVer, latestVer)
	if err != nil {
		log.Printf("‚ö†Ô∏è  Erro ao comparar vers√µes: %v", err)
		log.Printf("   üîß Tentando compara√ß√£o simples de strings...")
		// Fallback: compara√ß√£o simples
		isNewer = latestVer > currentVer
		log.Printf("   üìä Resultado da compara√ß√£o simples: %t ('%s' > '%s')", isNewer, latestVer, currentVer)
	} else {
		log.Printf("‚úÖ Compara√ß√£o semver bem-sucedida: isNewer = %t", isNewer)
	}

	if !isNewer {
		log.Printf("‚úÖ Aplicativo est√° atualizado")
		return &UpdateInfo{
			Available:   false,
			Version:     latestVer,
			DownloadURL: "",
			Message:     "Voc√™ j√° est√° usando a vers√£o mais recente",
		}, nil
	}

	// Buscar asset para download
	var downloadURL string
	var assetSize int64
	for _, asset := range release.Assets {
		// Aceitar tanto ZIP quanto EXE para Windows
		if strings.Contains(asset.Name, "windows") || 
		   strings.Contains(asset.Name, "Setup.exe") || 
		   strings.Contains(asset.Name, ".exe") {
			downloadURL = asset.DownloadURL
			assetSize = asset.Size
			log.Printf("üì¶ Asset encontrado: %s (%d bytes)", asset.Name, asset.Size)
			break
		}
	}

	if downloadURL == "" {
		log.Printf("‚ö†Ô∏è  Nenhum asset compat√≠vel encontrado")
		return &UpdateInfo{
			Available:   true,
			Version:     latestVer,
			DownloadURL: "",
			Message:     "Nova vers√£o dispon√≠vel, mas sem instalador. Baixe manualmente em: " + release.HTMLURL,
		}, nil
	}

	log.Printf("üéâ Nova vers√£o dispon√≠vel: %s -> %s", currentVer, latestVer)
	log.Printf("üì• URL de download: %s", downloadURL)

	return &UpdateInfo{
		Available:   true,
		Version:     latestVer,
		DownloadURL: downloadURL,
		ReleaseURL:  release.HTMLURL,
		Size:        assetSize,
		PublishedAt: release.PublishedAt,
		ReleaseNotes: release.Body,
		Message:     fmt.Sprintf("Nova vers√£o %s dispon√≠vel!", latestVer),
	}, nil
}

// getAssetName retorna o nome do asset baseado na plataforma
func (u *Updater) getAssetName() string {
	switch runtime.GOOS {
	case "windows":
		return "MilhoesSetup.exe" // Instalador do Windows
	case "darwin":
		return "milhoes-darwin"
	case "linux":
		return "milhoes-linux"
	default:
		return "milhoes"
	}
}

// DownloadUpdate baixa a atualiza√ß√£o
func (u *Updater) DownloadUpdate(ctx context.Context, updateInfo *UpdateInfo, progressCallback func(downloaded, total int64)) error {
	req, err := http.NewRequestWithContext(ctx, "GET", updateInfo.DownloadURL, nil)
	if err != nil {
		return fmt.Errorf("erro ao criar requisi√ß√£o de download: %w", err)
	}

	resp, err := u.client.Do(req)
	if err != nil {
		return fmt.Errorf("erro ao baixar atualiza√ß√£o: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("download falhou com status %d", resp.StatusCode)
	}

	// Criar arquivo tempor√°rio
	tempDir := os.TempDir()
	fileName := filepath.Base(updateInfo.DownloadURL)
	tempFile := filepath.Join(tempDir, fileName)

	file, err := os.Create(tempFile)
	if err != nil {
		return fmt.Errorf("erro ao criar arquivo tempor√°rio: %w", err)
	}
	defer file.Close()

	// Download com progresso
	var downloaded int64
	total := resp.ContentLength

	buffer := make([]byte, 32*1024) // 32KB buffer
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
			n, err := resp.Body.Read(buffer)
			if n > 0 {
				if _, writeErr := file.Write(buffer[:n]); writeErr != nil {
					return fmt.Errorf("erro ao escrever arquivo: %w", writeErr)
				}
				downloaded += int64(n)

				if progressCallback != nil {
					progressCallback(downloaded, total)
				}
			}

			if err == io.EOF {
				return nil
			}
			if err != nil {
				return fmt.Errorf("erro durante download: %w", err)
			}
		}
	}
}

// InstallUpdate instala a atualiza√ß√£o baixada
func (u *Updater) InstallUpdate(updateInfo *UpdateInfo) error {
	tempDir := os.TempDir()
	fileName := filepath.Base(updateInfo.DownloadURL)
	installerPath := filepath.Join(tempDir, fileName)

	// Verificar se arquivo existe
	if _, err := os.Stat(installerPath); os.IsNotExist(err) {
		return fmt.Errorf("arquivo de instala√ß√£o n√£o encontrado: %s", installerPath)
	}

	switch runtime.GOOS {
	case "windows":
		return u.installWindows(installerPath)
	case "darwin":
		return u.installMacOS(installerPath)
	case "linux":
		return u.installLinux(installerPath)
	default:
		return fmt.Errorf("plataforma n√£o suportada: %s", runtime.GOOS)
	}
}

// installWindows instala no Windows usando o instalador
func (u *Updater) installWindows(installerPath string) error {
	log.Printf("üîß Iniciando instala√ß√£o no Windows: %s", installerPath)
	
	// Verificar se √© ZIP ou EXE
	if strings.HasSuffix(strings.ToLower(installerPath), ".zip") {
		log.Printf("üì¶ Arquivo ZIP detectado, extraindo...")
		return u.installFromZip(installerPath)
	} else if strings.HasSuffix(strings.ToLower(installerPath), ".exe") {
		log.Printf("üöÄ Execut√°vel detectado, executando instalador...")
		return u.installFromExe(installerPath)
	} else {
		return fmt.Errorf("formato de arquivo n√£o suportado: %s", installerPath)
	}
}

// installFromZip extrai ZIP e substitui execut√°vel atual
func (u *Updater) installFromZip(zipPath string) error {
	log.Printf("üì¶ Extraindo arquivo ZIP: %s", zipPath)
	
	// Abrir arquivo ZIP
	reader, err := zip.OpenReader(zipPath)
	if err != nil {
		return fmt.Errorf("erro ao abrir ZIP: %w", err)
	}
	defer reader.Close()

	// Obter caminho do execut√°vel atual
	currentExe, err := os.Executable()
	if err != nil {
		return fmt.Errorf("erro ao obter caminho do execut√°vel: %w", err)
	}
	
	tempDir := filepath.Join(os.TempDir(), "milhoes_update")
	
	// Criar diret√≥rio tempor√°rio
	os.RemoveAll(tempDir)
	if err := os.MkdirAll(tempDir, 0755); err != nil {
		return fmt.Errorf("erro ao criar diret√≥rio tempor√°rio: %w", err)
	}
	
	// Extrair arquivos
	for _, file := range reader.File {
		log.Printf("üìÑ Extraindo: %s", file.Name)
		
		rc, err := file.Open()
		if err != nil {
			return fmt.Errorf("erro ao abrir arquivo no ZIP: %w", err)
		}
		
		destPath := filepath.Join(tempDir, file.Name)
		
		// Criar diret√≥rios se necess√°rio
		if err := os.MkdirAll(filepath.Dir(destPath), 0755); err != nil {
			rc.Close()
			return fmt.Errorf("erro ao criar diret√≥rio: %w", err)
		}
		
		// Extrair arquivo
		destFile, err := os.Create(destPath)
		if err != nil {
			rc.Close()
			return fmt.Errorf("erro ao criar arquivo: %w", err)
		}
		
		_, err = io.Copy(destFile, rc)
		destFile.Close()
		rc.Close()
		
		if err != nil {
			return fmt.Errorf("erro ao extrair arquivo: %w", err)
		}
	}
	
	// Encontrar novo execut√°vel
	newExePath := filepath.Join(tempDir, "milhoes.exe")
	if _, err := os.Stat(newExePath); os.IsNotExist(err) {
		return fmt.Errorf("execut√°vel n√£o encontrado no ZIP: %s", newExePath)
	}
	
	log.Printf("‚úÖ Extra√ß√£o conclu√≠da. Preparando para substituir execut√°vel...")
	
	// Criar script de atualiza√ß√£o
	scriptPath := filepath.Join(os.TempDir(), "update_milhoes.bat")
	scriptContent := fmt.Sprintf(`@echo off
echo Aguardando fechamento do aplicativo...
timeout /t 2 /nobreak > nul
echo Fazendo backup...
move "%s" "%s.bak" 2>nul
echo Copiando nova versao...
copy "%s" "%s"
if errorlevel 1 (
    echo Erro na atualizacao, restaurando backup...
    move "%s.bak" "%s"
    echo Falha na atualizacao
) else (
    echo Limpando backup...
    del "%s.bak" 2>nul
    echo Atualizacao concluida com sucesso!
    echo Reiniciando aplicativo...
    start "" "%s"
)
echo Limpando arquivos temporarios...
rmdir /s /q "%s" 2>nul
del "%%~f0"
`, currentExe, currentExe, newExePath, currentExe, currentExe, currentExe, currentExe, currentExe, tempDir)

	if err := os.WriteFile(scriptPath, []byte(scriptContent), 0755); err != nil {
		return fmt.Errorf("erro ao criar script de atualiza√ß√£o: %w", err)
	}
	
	log.Printf("üöÄ Executando script de atualiza√ß√£o...")
	
	// Executar script em background
	cmd := exec.Command("cmd", "/C", scriptPath)
	cmd.Dir = os.TempDir()
	
	if err := cmd.Start(); err != nil {
		return fmt.Errorf("erro ao executar script de atualiza√ß√£o: %w", err)
	}
	
	// Sair da aplica√ß√£o para permitir atualiza√ß√£o
	log.Printf("üëã Encerrando aplica√ß√£o para permitir atualiza√ß√£o...")
	go func() {
		time.Sleep(1 * time.Second)
		os.Exit(0)
	}()
	
	return nil
}

// installFromExe executa instalador EXE
func (u *Updater) installFromExe(exePath string) error {
	log.Printf("üöÄ Executando instalador: %s", exePath)
	
	// Executar instalador silencioso
	cmd := exec.Command(exePath, "/SILENT", "/CLOSEAPPLICATIONS", "/RESTARTAPPLICATIONS")

	// Executar em background e fechar aplica√ß√£o atual
	if err := cmd.Start(); err != nil {
		return fmt.Errorf("erro ao executar instalador: %w", err)
	}

	// Sair da aplica√ß√£o para permitir atualiza√ß√£o
	log.Printf("üëã Encerrando aplica√ß√£o para instala√ß√£o...")
	go func() {
		time.Sleep(2 * time.Second)
		os.Exit(0)
	}()

	return nil
}

// installMacOS instala no macOS
func (u *Updater) installMacOS(installerPath string) error {
	// Implementar instala√ß√£o para macOS
	return fmt.Errorf("instala√ß√£o macOS n√£o implementada ainda")
}

// installLinux instala no Linux
func (u *Updater) installLinux(installerPath string) error {
	// Implementar instala√ß√£o para Linux
	return fmt.Errorf("instala√ß√£o Linux n√£o implementada ainda")
}

// ScheduleUpdateCheck agenda verifica√ß√£o autom√°tica
func (u *Updater) ScheduleUpdateCheck(interval time.Duration, callback func(*UpdateInfo, error)) {
	ticker := time.NewTicker(interval)

	go func() {
		for {
			select {
			case <-ticker.C:
				ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
				updateInfo, err := u.CheckForUpdates(ctx)
				cancel()

				if callback != nil {
					callback(updateInfo, err)
				}
			}
		}
	}()
}

// GetCurrentVersion retorna vers√£o atual
func (u *Updater) GetCurrentVersion() string {
	return u.currentVersion
}

// isVersionNewer compara duas vers√µes
func (u *Updater) isVersionNewer(currentVer, latestVer string) (bool, error) {
	log.Printf("üî¨ isVersionNewer: Comparando '%s' vs '%s'", currentVer, latestVer)
	
	currentSemver, err := semver.NewVersion(currentVer)
	if err != nil {
		log.Printf("‚ùå Erro ao parsear vers√£o atual '%s': %v", currentVer, err)
		return false, fmt.Errorf("vers√£o atual inv√°lida: %w", err)
	}
	log.Printf("‚úÖ Vers√£o atual parseada: %s", currentSemver.String())

	latestSemver, err := semver.NewVersion(latestVer)
	if err != nil {
		log.Printf("‚ùå Erro ao parsear vers√£o do GitHub '%s': %v", latestVer, err)
		return false, fmt.Errorf("vers√£o da release inv√°lida: %w", err)
	}
	log.Printf("‚úÖ Vers√£o do GitHub parseada: %s", latestSemver.String())

	result := latestSemver.GreaterThan(currentSemver)
	log.Printf("üîç Resultado da compara√ß√£o semver: %s.GreaterThan(%s) = %t", 
		latestSemver.String(), currentSemver.String(), result)
	
	return result, nil
}
