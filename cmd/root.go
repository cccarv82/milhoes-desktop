package cmd

import (
	"fmt"
	"lottery-optimizer-gui/internal/config"
	"lottery-optimizer-gui/internal/ui"
	"os"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var cfgFile string

// rootCmd representa o comando base quando chamado sem subcomandos
var rootCmd = &cobra.Command{
	Use:   "lottery-optimizer",
	Short: "üé∞ Otimizador Inteligente de Loterias",
	Long: color.New(color.FgCyan, color.Bold).Sprint(`
üé∞ LOTTERY OPTIMIZER
Estrat√©gias Inteligentes para Mega Sena e Lotof√°cil

Usando intelig√™ncia artificial avan√ßada para maximizar 
suas chances de ganhar nas loterias brasileiras!

Desenvolvido com ‚ù§Ô∏è  e muita matem√°tica üìä
`),
	Run: func(cmd *cobra.Command, args []string) {
		ui.ShowWelcome()
		ui.StartInteractiveMode()
	},
}

// Execute adiciona todos os comandos filhos ao comando raiz e define flags apropriadamente
func Execute() error {
	return rootCmd.Execute()
}

func init() {
	cobra.OnInitialize(initConfig)

	// Flags globais
	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "arquivo de configura√ß√£o (padr√£o: ./lottery-optimizer.yaml ou $HOME/.lottery-optimizer.yaml)")
	rootCmd.PersistentFlags().Bool("verbose", false, "sa√≠da detalhada")
	rootCmd.PersistentFlags().String("api-key", "", "chave da API do Claude (tamb√©m pode ser definida via CLAUDE_API_KEY)")

	// Bind flags com viper
	viper.BindPFlag("verbose", rootCmd.PersistentFlags().Lookup("verbose"))
	viper.BindPFlag("api-key", rootCmd.PersistentFlags().Lookup("api-key"))
}

// initConfig l√™ o arquivo de configura√ß√£o e vari√°veis de ambiente
func initConfig() {
	if cfgFile != "" {
		viper.SetConfigFile(cfgFile)
	} else {
		// Primeiro: procurar no diret√≥rio atual (onde est√° o execut√°vel)
		viper.AddConfigPath(".")

		// Segundo: procurar no diret√≥rio home (fallback)
		home, err := os.UserHomeDir()
		if err == nil {
			viper.AddConfigPath(home)
		}

		viper.SetConfigType("yaml")
		viper.SetConfigName("lottery-optimizer") // sem ponto, mais limpo
	}

	viper.AutomaticEnv()

	// Se um arquivo de configura√ß√£o for encontrado, leia-o
	if err := viper.ReadInConfig(); err == nil {
		if viper.GetBool("verbose") {
			fmt.Fprintln(os.Stderr, "Usando arquivo de configura√ß√£o:", viper.ConfigFileUsed())
		}
	}

	// Inicializar configura√ß√£o
	config.Init()
}
