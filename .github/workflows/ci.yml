name: 🧪 CI - Tests & Quality Only

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'DISTRIBUTION.md'
      - 'installer/**'
  push:
    branches: [ main, develop ]
    # 🚨 CRUCIAL: NÃO rodar se for push de tag de release
    tags-ignore: [ 'v*' ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'DISTRIBUTION.md'
      - 'installer/**'

env:
  GO_VERSION: '1.22'

jobs:
  # =====================================================
  # 🧪 APENAS TESTES RÁPIDOS - SEM BUILDS PESADOS
  # =====================================================
  validate:
    name: 🧪 Tests & Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 📦 Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: 📥 Download Dependencies
      run: go mod download
      
    - name: 🔍 Verify Dependencies
      run: go mod verify
      
    - name: 🧹 Check Code Formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "::error::Code is not formatted with gofmt"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code formatting OK"
        
    - name: 🔍 Run Go Vet
      run: |
        go vet ./...
        echo "✅ Go vet passed"
      
    - name: 🧪 Run Tests
      run: |
        go test -v -race -timeout=30s ./...
        echo "✅ All tests passed"
      
    - name: 🏗️ Verify Build (Quick Test)
      run: |
        go build -o test-binary .
        ./test-binary --help > /dev/null 2>&1 || echo "Binary help works"
        rm -f test-binary
        echo "✅ Build verification OK"
        
    - name: 🔍 Check for Common Issues
      run: |
        # Check for hardcoded secrets
        if grep -r "sk-ant-" . --exclude-dir=.git || grep -r "API_KEY.*=" . --exclude-dir=.git; then
          echo "::warning::Possible hardcoded secrets found"
        fi
        
        # Check for TODO/FIXME
        if grep -r "TODO\|FIXME" . --exclude-dir=.git --exclude="*.md"; then
          echo "::notice::TODOs/FIXMEs found - consider addressing before release"
        fi
        
        echo "✅ Security checks completed"
        
    - name: ✅ CI Success
      run: |
        echo ""
        echo "🎉 CI VALIDAÇÃO COMPLETA!"
        echo "================================"
        echo "✅ Dependências verificadas"
        echo "✅ Código formatado corretamente"
        echo "✅ Go vet passou sem problemas"
        echo "✅ Todos os testes passaram"
        echo "✅ Build funciona corretamente"
        echo "✅ Verificações de segurança OK"
        echo ""
        echo "🚀 PRONTO PARA RELEASE!"
        echo "Para fazer release:"
        echo "1. git tag v1.0.2"
        echo "2. git push origin v1.0.2"
        echo ""
        echo "O workflow de release se encarregará do build profissional! 💪" 