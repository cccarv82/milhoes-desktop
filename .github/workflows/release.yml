name: üöÄ Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

# Required permissions for creating releases
permissions:
  contents: write
  packages: write
  actions: read

env:
  WAILS_VERSION: v2.10.1

jobs:
  build:
    name: üèóÔ∏è Build App
    strategy:
      matrix:
        build: [
          {name: windows, os: windows-latest, arch: amd64, extension: .exe, wails_platform: windows}
        ]
    
    runs-on: ${{ matrix.build.os }}
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: üîß Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: üîß Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üì¶ Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.WAILS_VERSION }}

    - name: üèóÔ∏è Build Frontend
      run: |
        echo "=== Building frontend ==="
        cd frontend
        npm install
        npm run build
        echo "Frontend build completed"
      shell: pwsh

    - name: üèóÔ∏è Build Wails App
      run: |
        echo "=== Pre-build environment check ==="
        echo "Current directory: $(Get-Location)"
        echo "Go version: $(go version)"
        echo "Wails version: $(wails version)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo ""
        echo "=== Cleaning old build files ==="
        # Remove any existing executables that might conflict
        Remove-Item -Path "lottery-optimizer.exe" -ErrorAction SilentlyContinue
        Remove-Item -Path "lottery-optimizer" -ErrorAction SilentlyContinue  
        Remove-Item -Path "test-binary" -ErrorAction SilentlyContinue
        Remove-Item -Path "build" -Recurse -ErrorAction SilentlyContinue
        echo "‚úÖ Cleaned old files"
        echo ""
        echo "=== Pre-build file structure ==="
        Get-ChildItem -Force | Format-Table -AutoSize
        echo ""
        echo "Building with version: ${{ github.ref_name }}"
        echo "=== Starting Wails Build ==="
        echo "Command: wails build -platform ${{ matrix.build.wails_platform }}/${{ matrix.build.arch }} -ldflags `"-X main.version=${{ github.ref_name }}`""
        echo ""
        
        # Run Wails build with direct output
        wails build -platform ${{ matrix.build.wails_platform }}/${{ matrix.build.arch }} -ldflags "-X main.version=${{ github.ref_name }}"
        $wailsExitCode = $LASTEXITCODE
        
        echo ""
        echo "=== Wails Build Exit Code: $wailsExitCode ==="
        
        # Always show what happened regardless of exit code
        if ($wailsExitCode -ne 0) {
          echo "‚ùå Wails build failed with exit code: $wailsExitCode"
          echo "=== Let's see what files exist after failed build ==="
          Get-ChildItem -Recurse -Name "*.exe" -ErrorAction SilentlyContinue
          exit $wailsExitCode
        } else {
          echo "‚úÖ Wails build completed with exit code 0"
        }
      shell: pwsh

    - name: üîç Debug Build Output
      run: |
        echo "=== Complete file system scan for milhoes.exe ==="
        Get-ChildItem -Recurse -Name "milhoes.exe" -ErrorAction SilentlyContinue
        echo ""
        echo "=== All .exe files found ==="
        Get-ChildItem -Recurse -Name "*.exe" -ErrorAction SilentlyContinue
        echo ""
        echo "=== Root directory contents ==="
        Get-ChildItem -Force | Format-Table -AutoSize
        echo ""
        echo "=== Build directory structure (if exists) ==="
        if (Test-Path "build") {
          Get-ChildItem -Recurse build/ -Force | Format-Table -AutoSize
        } else {
          echo "No build directory found"
        }
        echo ""
        echo "=== Checking common Wails output locations ==="
        $possiblePaths = @(
          "build/bin/milhoes.exe",
          "build/milhoes.exe", 
          "bin/milhoes.exe",
          "milhoes.exe",
          "app-builds/milhoes.exe",
          "dist/milhoes.exe"
        )
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            echo "‚úÖ Found at: $path (size: $((Get-Item $path).Length) bytes)"
          } else {
            echo "‚ùå Not found: $path"
          }
        }
      shell: pwsh

    - name: üìã List Build Output
      run: |
        echo "=== Post-build file scan ==="
        echo "Current directory: $(Get-Location)"
        echo ""
        if (Test-Path "build") {
          echo "=== Build Directory ==="
          Get-ChildItem -Path build/ -Force | Format-Table -AutoSize
          if (Test-Path "build/bin") { 
            echo "=== Build/bin Directory ==="
            Get-ChildItem -Path build/bin/ -Force | Format-Table -AutoSize 
            echo "=== Checking milhoes.exe specifically ==="
            if (Test-Path "build/bin/milhoes.exe") {
              echo "‚úÖ milhoes.exe found with size: $((Get-Item 'build/bin/milhoes.exe').Length) bytes"
            } else {
              echo "‚ùå milhoes.exe NOT found in build/bin/"
            }
          } else { 
            echo "‚ùå build/bin directory not found" 
            echo "=== All directories in build ==="
            Get-ChildItem -Path build/ -Directory -Force -ErrorAction SilentlyContinue | Format-Table -AutoSize
          }
        } else {
          echo "‚ùå No build directory created by Wails!"
          echo "=== Searching for any .exe files ==="
          Get-ChildItem -Recurse -Name "*.exe" -ErrorAction SilentlyContinue
          echo "=== Root directory contents after build ==="
          Get-ChildItem -Force | Format-Table -AutoSize
        }
      shell: pwsh

    - name: üì¶ Compress Artifacts
      run: |
        echo "=== Preparing for compression ==="
        echo "=== Verifying milhoes.exe exists ==="
        if (Test-Path "build/bin/milhoes.exe") {
          echo "‚úÖ milhoes.exe found at build/bin/milhoes.exe"
          echo "File size: $((Get-Item 'build/bin/milhoes.exe').Length) bytes"
          echo "‚úÖ File is already in the correct location for compression"
        } else {
          echo "‚ùå milhoes.exe not found at expected location build/bin/milhoes.exe"
          echo "=== Searching for milhoes.exe everywhere ==="
          Get-ChildItem -Recurse -Filter "milhoes.exe" | ForEach-Object { 
            echo "Found: $($_.FullName)"
            # Copy to expected location if found elsewhere
            if (!(Test-Path "build/bin")) { New-Item -ItemType Directory -Path "build/bin" -Force }
            Copy-Item $_.FullName "build/bin/milhoes.exe" -Force
            echo "‚úÖ Copied to build/bin/milhoes.exe"
          }
          
          # Final check
          if (!(Test-Path "build/bin/milhoes.exe")) {
            echo "‚ùå Could not locate milhoes.exe anywhere!"
            exit 1
          }
        }
      shell: pwsh

    - name: üì¶ Create Artifact ZIP
      uses: vimtor/action-zip@v1.2
      with:
        files: build/bin/
        dest: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}.zip

    - name: üì§ Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}
        path: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}.zip

  create-installer:
    name: üì¶ Create Windows Installer
    needs: build
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üì• Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: milhoes-windows-amd64

    - name: üìÇ Extract Build Artifacts
      run: |
        echo "=== Extracting artifacts ==="
        echo "Original zip contents:"
        7z l milhoes-windows-amd64.zip
        echo ""
        Expand-Archive -Path milhoes-windows-amd64.zip -DestinationPath ./extracted/ -Force
        echo "=== Contents after extraction ==="
        Get-ChildItem -Recurse ./extracted/
        echo ""
        echo "=== Creating build structure ==="
        New-Item -ItemType Directory -Path "build/bin" -Force
        
        # ZIP contains milhoes.exe directly in root, not in build/bin/
        if (Test-Path "./extracted/milhoes.exe") {
          Copy-Item "./extracted/milhoes.exe" "build/bin/milhoes.exe" -Force
          echo "‚úÖ Copied milhoes.exe from extracted/ to build/bin/"
          echo "File size: $((Get-Item 'build/bin/milhoes.exe').Length) bytes"
        } else {
          echo "‚ùå milhoes.exe not found in extracted folder"
          echo "=== All files in extracted folder ==="
          Get-ChildItem -Recurse ./extracted/ -Force
          exit 1
        }
      shell: pwsh

    - name: üõ†Ô∏è Install Inno Setup
      run: |
        echo "=== Installing Inno Setup ==="
        choco install innosetup -y

    - name: üìã Verify Files Before Build
      run: |
        echo "=== Verifying installer requirements ==="
        echo "Current directory:"
        Get-Location
        echo "Directory contents:"
        Get-ChildItem -Recurse
        echo "=== Checking required files ==="
        if (Test-Path "build/bin/milhoes.exe") { echo "‚úÖ milhoes.exe found" } else { echo "‚ùå milhoes.exe NOT found" }
        if (Test-Path "README.md") { echo "‚úÖ README.md found" } else { echo "‚ùå README.md NOT found" }
        if (Test-Path "LICENSE") { echo "‚úÖ LICENSE found" } else { echo "‚ùå LICENSE NOT found" }

    - name: üèóÔ∏è Create Installer
      run: |
        echo "=== Creating installer ==="
        iscc installer/setup.iss

    - name: üì§ Upload Installer
      uses: actions/upload-artifact@v4
      with:
        name: milhoes-installer
        path: installer/Output/MilhoesSetup.exe

  release:
    name: üöÄ Create GitHub Release
    needs: [build, create-installer]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: üì• Download All Artifacts
      uses: actions/download-artifact@v4

    - name: üìã List Downloaded Artifacts
      run: |
        echo "=== Downloaded artifacts ==="
        find . -type f -name "*.exe" -o -name "*.zip" | head -20

    - name: üöÄ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          milhoes-windows-amd64/milhoes-windows-amd64.zip
          milhoes-installer/MilhoesSetup.exe
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        body: |
          ## üéØ Milh√µes - Otimizador de Loterias ${{ github.ref_name }}
          
          ### üì¶ Downloads Dispon√≠veis:
          - **`MilhoesSetup.exe`** - Instalador profissional Windows (recomendado)
          - **`milhoes-windows-amd64.zip`** - Vers√£o port√°vel
          
          ### üöÄ Instala√ß√£o:
          1. Baixe o `MilhoesSetup.exe`
          2. Execute como administrador
          3. Siga o assistente de instala√ß√£o
          
          ### ‚öôÔ∏è Primeira Configura√ß√£o:
          1. Obtenha sua chave da API do Claude em: https://console.anthropic.com/
          2. Configure no app: Menu ‚Üí Configura√ß√µes
          3. Teste a conex√£o
          4. Comece a otimizar suas loterias! üé∞
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 