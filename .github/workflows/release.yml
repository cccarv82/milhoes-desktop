name: 🚀 Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  WAILS_VERSION: v2.10.1

jobs:
  build:
    name: 🏗️ Build App
    strategy:
      matrix:
        build: [
          {name: windows, os: windows-latest, arch: amd64, extension: .exe}
        ]
    
    runs-on: ${{ matrix.build.os }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: false

    - name: 🔧 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: 🔧 Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.WAILS_VERSION }}

    - name: 🏗️ Build Frontend
      run: |
        echo "=== Building frontend ==="
        cd frontend
        npm install
        npm run build
        echo "Frontend build completed"
      shell: pwsh

    - name: 🏗️ Build Wails App
      run: |
        echo "Building with version: ${{ github.ref_name }}"
        wails build -platform ${{ matrix.build.os }}/${{ matrix.build.arch }} -ldflags "-X main.version=${{ github.ref_name }}"
        echo "Wails build completed successfully"
      shell: pwsh

    - name: 📋 List Build Output
      run: |
        echo "=== Build Directory ==="
        Get-ChildItem -Path build/ -Force | Format-Table -AutoSize
        if (Test-Path "build/bin") { 
          echo "=== Build/bin Directory ==="
          Get-ChildItem -Path build/bin/ -Force | Format-Table -AutoSize 
          echo "=== Checking milhoes.exe specifically ==="
          if (Test-Path "build/bin/milhoes.exe") {
            echo "✅ milhoes.exe found with size: $((Get-Item 'build/bin/milhoes.exe').Length) bytes"
          } else {
            echo "❌ milhoes.exe NOT found in build/bin/"
          }
        } else { 
          echo "❌ build/bin directory not found" 
          echo "=== All directories in build ==="
          Get-ChildItem -Path build/ -Directory -Force | Format-Table -AutoSize
        }
      shell: pwsh

    - name: 📦 Compress Artifacts
      run: |
        echo "=== Preparing for compression ==="
        if (Test-Path "build/bin/milhoes.exe") {
          echo "✅ milhoes.exe found, proceeding with compression"
          echo "File size: $((Get-Item 'build/bin/milhoes.exe').Length) bytes"
        } else {
          echo "❌ milhoes.exe not found before compression"
          exit 1
        }
      shell: pwsh

    - name: 📦 Create Artifact ZIP
      uses: vimtor/action-zip@v1.2
      with:
        files: build/bin/
        dest: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}.zip

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}
        path: milhoes-${{ matrix.build.name }}-${{ matrix.build.arch }}.zip

  create-installer:
    name: 📦 Create Windows Installer
    needs: build
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: milhoes-windows-amd64

    - name: 📂 Extract Build Artifacts
      run: |
        echo "=== Extracting artifacts ==="
        echo "Original zip contents:"
        7z l milhoes-windows-amd64.zip
        echo ""
        Expand-Archive -Path milhoes-windows-amd64.zip -DestinationPath ./extracted/ -Force
        echo "=== Contents after extraction ==="
        Get-ChildItem -Recurse ./extracted/
        echo ""
        echo "=== Looking for milhoes.exe everywhere ==="
        Get-ChildItem -Recurse -Name "*.exe" ./extracted/
        echo ""
        echo "=== Creating build structure ==="
        New-Item -ItemType Directory -Path "build/bin" -Force
        # Find and copy milhoes.exe wherever it is
        $exeFile = Get-ChildItem -Recurse -Name "milhoes.exe" ./extracted/
        if ($exeFile) {
          $exePath = Join-Path ./extracted/ $exeFile
          Copy-Item $exePath "build/bin/milhoes.exe" -Force
          echo "✅ Copied milhoes.exe from $exePath to build/bin/"
        } else {
          echo "❌ milhoes.exe not found anywhere in extracted files"
          exit 1
        }

    - name: 🛠️ Install Inno Setup
      run: |
        echo "=== Installing Inno Setup ==="
        choco install innosetup -y

    - name: 📋 Verify Files Before Build
      run: |
        echo "=== Verifying installer requirements ==="
        echo "Current directory:"
        Get-Location
        echo "Directory contents:"
        Get-ChildItem -Recurse
        echo "=== Checking required files ==="
        if (Test-Path "build/bin/milhoes.exe") { echo "✅ milhoes.exe found" } else { echo "❌ milhoes.exe NOT found" }
        if (Test-Path "README.md") { echo "✅ README.md found" } else { echo "❌ README.md NOT found" }
        if (Test-Path "LICENSE") { echo "✅ LICENSE found" } else { echo "❌ LICENSE NOT found" }

    - name: 🏗️ Create Installer
      run: |
        echo "=== Creating installer ==="
        iscc installer/setup.iss

    - name: 📤 Upload Installer
      uses: actions/upload-artifact@v4
      with:
        name: milhoes-installer
        path: installer/Output/MilhoesSetup.exe

  release:
    name: 🚀 Create GitHub Release
    needs: [build, create-installer]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4

    - name: 📋 List Downloaded Artifacts
      run: |
        echo "=== Downloaded artifacts ==="
        find . -type f -name "*.exe" -o -name "*.zip" | head -20

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          milhoes-windows-amd64/milhoes-windows-amd64.zip
          milhoes-installer/MilhoesSetup.exe
        generate_release_notes: true
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        body: |
          ## 🎯 Milhões - Otimizador de Loterias ${{ github.ref_name }}
          
          ### 📦 Downloads Disponíveis:
          - **`MilhoesSetup.exe`** - Instalador profissional Windows (recomendado)
          - **`milhoes-windows-amd64.zip`** - Versão portável
          
          ### 🚀 Instalação:
          1. Baixe o `MilhoesSetup.exe`
          2. Execute como administrador
          3. Siga o assistente de instalação
          
          ### ⚙️ Primeira Configuração:
          1. Obtenha sua chave da API do Claude em: https://console.anthropic.com/
          2. Configure no app: Menu → Configurações
          3. Teste a conexão
          4. Comece a otimizar suas loterias! 🎰
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 